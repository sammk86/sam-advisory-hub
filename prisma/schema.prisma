generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  image              String?
  role               UserRole            @default(CLIENT)
  emailVerified      DateTime?
  stripeCustomerId   String?             @unique
  isConfirmed        Boolean?            @default(false)
  confirmedAt        DateTime?
  confirmedBy        String?
  rejectionReason    String?
  sessionStatus      SessionStatus       @default(INACTIVE)
  sessionActivatedAt DateTime?
  sessionActivatedBy String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  password           String?
  accounts           Account[]
  emailNotifications EmailNotification[]
  enrollments        Enrollment[]
  sessions           Session[]
  meetings           Meeting[]           @relation("MeetingToUser")
  meetingRequests    MeetingRequest[]
  approvedMeetingRequests MeetingRequest[] @relation("MeetingRequestApprover")
  sentMessages       Message[]           @relation("MessageSender")
  conversations      ConversationParticipant[] @relation("ConversationParticipant")
  feedbacks          Feedback[]

  @@index([email])
  @@index([role])
  @@index([stripeCustomerId])
  @@index([isConfirmed])
  @@map("users")
}

model Service {
  id                String             @id @default(cuid())
  name              String
  description       String
  type              ServiceType
  status            ServiceStatus      @default(DRAFT)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  hourlyRate        Int?
  benefits          String[]
  features          String[]
  oneOffPrice       Int?
  process           String[]
  testimonials      Json?
  advisoryService   AdvisoryService?
  enrollments       Enrollment[]
  mentorshipProgram MentorshipProgram?

  @@map("services")
}

model MentorshipProgram {
  id               String        @id @default(cuid())
  serviceId        String        @unique
  format           ProgramFormat
  learningOutcomes String[]
  sampleCurriculum String?
  defaultRoadmap   Json?
  service          Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("mentorship_programs")
}

model AdvisoryService {
  id                 String            @id @default(cuid())
  serviceId          String            @unique
  idealClientProfile String
  scopeOfWork        String
  expectedOutcomes   String[]
  sampleDeliverables String[]
  packages           AdvisoryPackage[]
  service            Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("advisory_services")
}

model AdvisoryPackage {
  id                String          @id @default(cuid())
  advisoryServiceId String
  name              String
  hours             Int
  price             Int
  description       String?
  advisoryService   AdvisoryService @relation(fields: [advisoryServiceId], references: [id], onDelete: Cascade)
  enrollments       Enrollment[]

  @@map("advisory_packages")
}

model Enrollment {
  id                   String           @id @default(cuid())
  userId               String
  serviceId            String
  planType             PlanType
  status               EnrollmentStatus @default(ACTIVE)
  enrolledAt           DateTime         @default(now())
  expiresAt            DateTime?        // Added expiry date
  advisoryPackageId    String?
  hoursRemaining       Int?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  deliverables         Deliverable[]
  advisoryPackage      AdvisoryPackage? @relation(fields: [advisoryPackageId], references: [id])
  service              Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetings             Meeting[]
  meetingRequests      MeetingRequest[]
  payments             Payment[]
  roadmap              Roadmap?

  @@unique([userId, serviceId])
  @@index([userId])
  @@index([serviceId])
  @@index([status])
  @@index([expiresAt]) // Added index for expiry date queries
  @@map("enrollments")
}

model Roadmap {
  id           String      @id @default(cuid())
  enrollmentId String      @unique
  title        String
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  milestones   Milestone[]
  enrollment   Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@map("roadmaps")
}

model Milestone {
  id          String     @id @default(cuid())
  roadmapId   String
  title       String
  description String?
  order       Int
  status      TaskStatus @default(NOT_STARTED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  roadmap     Roadmap    @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("milestones")
}

model Task {
  id          String     @id @default(cuid())
  milestoneId String
  title       String
  description String?
  resources   String[]
  dueDate     DateTime?
  status      TaskStatus @default(NOT_STARTED)
  order       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  milestone   Milestone  @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Deliverable {
  id           String            @id @default(cuid())
  enrollmentId String
  title        String
  description  String
  type         DeliverableType
  status       DeliverableStatus @default(NOT_STARTED)
  dueDate      DateTime?
  completedAt  DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  files        DeliverableFile[]
  enrollment   Enrollment        @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@map("deliverables")
}

model DeliverableFile {
  id            String      @id @default(cuid())
  deliverableId String
  fileName      String
  fileUrl       String
  fileSize      Int
  mimeType      String
  version       Int         @default(1)
  uploadedAt    DateTime    @default(now())
  deliverable   Deliverable @relation(fields: [deliverableId], references: [id], onDelete: Cascade)

  @@map("deliverable_files")
}

model MeetingRequest {
  id            String              @id @default(cuid())
  enrollmentId  String
  userId        String
  title         String
  description   String?
  requestedDate DateTime
  requestedTime String              // Time in user's timezone
  timezone      String
  duration      Int                 @default(60)
  status        MeetingRequestStatus @default(PENDING)
  adminNotes    String?
  proposedDate  DateTime?           // Admin's proposed alternative date
  proposedTime  String?             // Admin's proposed alternative time
  approvedAt    DateTime?
  approvedBy    String?
  meetingId     String?             @unique // If approved, link to created meeting
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  enrollment    Enrollment          @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  approver      User?               @relation("MeetingRequestApprover", fields: [approvedBy], references: [id])
  meeting       Meeting?            @relation(fields: [meetingId], references: [id])

  @@index([enrollmentId])
  @@index([userId])
  @@index([status])
  @@map("meeting_requests")
}

model Meeting {
  id            String        @id @default(cuid())
  enrollmentId  String
  meetingRequestId String?    @unique // Link to the original request
  title         String
  description   String?
  scheduledAt   DateTime
  duration      Int
  status        MeetingStatus @default(SCHEDULED)
  videoLink     String?
  agenda        String?
  notes         String?
  recordingUrl  String?
  hoursConsumed Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  enrollment    Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  attendees     User[]        @relation("MeetingToUser")
  meetingRequest MeetingRequest?

  @@index([enrollmentId])
  @@index([scheduledAt])
  @@map("meetings")
}

model Payment {
  id              String        @id @default(cuid())
  enrollmentId    String
  stripePaymentId String        @unique
  amount          Int
  currency        String        @default("usd")
  status          PaymentStatus
  paymentType     PlanType
  description     String?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  enrollment      Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model EmailNotification {
  id           String   @id @default(cuid())
  userId       String
  type         String
  sentAt       DateTime
  status       String
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@map("email_notifications")
}

model NewsletterSubscriber {
  id                  String               @id @default(cuid())
  email               String               @unique
  firstName           String?
  lastName            String?
  interests           String[]
  source              String
  status              SubscriberStatus     @default(ACTIVE)
  subscribedAt        DateTime             @default(now())
  unsubscribedAt      DateTime?
  lastEngagement      DateTime?
  totalEmailsReceived Int                  @default(0)
  totalEmailsOpened   Int                  @default(0)
  totalEmailsClicked  Int                  @default(0)
  emailTracking       EmailTracking[]
  campaigns           NewsletterCampaign[] @relation("NewsletterCampaignToNewsletterSubscriber")

  @@index([email])
  @@index([status])
  @@index([subscribedAt])
  @@index([interests])
  @@map("newsletter_subscribers")
}

model NewsletterCampaign {
  id                String                 @id @default(cuid())
  title             String
  subject           String
  content           String
  textContent       String
  status            CampaignStatus         @default(DRAFT)
  scheduledAt       DateTime?
  sentAt            DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  totalSent         Int                    @default(0)
  totalOpened       Int                    @default(0)
  totalClicked      Int                    @default(0)
  totalUnsubscribed Int                    @default(0)
  totalBounced      Int                    @default(0)
  emailTracking     EmailTracking[]
  subscribers       NewsletterSubscriber[] @relation("NewsletterCampaignToNewsletterSubscriber")

  @@index([status])
  @@index([scheduledAt])
  @@index([sentAt])
  @@map("newsletter_campaigns")
}

model EmailTracking {
  id           String               @id @default(cuid())
  campaignId   String
  subscriberId String
  email        String
  messageId    String?
  status       EmailStatus
  openedAt     DateTime?
  clickedAt    DateTime?
  bouncedAt    DateTime?
  complainedAt DateTime?
  createdAt    DateTime             @default(now())
  campaign     NewsletterCampaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  subscriber   NewsletterSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@unique([campaignId, subscriberId])
  @@index([email])
  @@index([status])
  @@map("email_tracking")
}

model Message {
  id            String        @id @default(cuid())
  conversationId String
  senderId      String
  content       String
  messageType   MessageType   @default(TEXT)
  attachments   Json?         // Array of file attachments
  isRead        Boolean       @default(false)
  readAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  conversation  Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender        User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}

model Conversation {
  id            String    @id @default(cuid())
  title         String?
  lastMessageAt DateTime  @default(now())
  isArchived    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  participants  ConversationParticipant[]
  messages      Message[]
  
  @@index([lastMessageAt])
  @@index([isArchived])
  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  unreadCount    Int          @default(0)
  lastReadAt     DateTime?
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation("ConversationParticipant", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
  @@map("conversation_participants")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum SessionStatus {
  INACTIVE
  ACTIVE
  SUSPENDED
}

enum ServiceType {
  MENTORSHIP
  ADVISORY
}

enum ServiceStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProgramFormat {
  INDIVIDUAL
  GROUP
}

enum PlanType {
  SINGLE_SESSION
  MONTHLY_PLAN
  CONSULTATION
  PACKAGE
  RETAINER
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  CANCELLED
  COMPLETED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum DeliverableType {
  REPORT
  STRATEGIC_PLAN
  ARCHITECTURE_REVIEW
  CODE_REVIEW
  RECOMMENDATION_DOCUMENT
  CUSTOM
}

enum DeliverableStatus {
  NOT_STARTED
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
}

enum MeetingRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PROPOSED_ALTERNATIVE
}

enum MeetingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum SubscriberStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
}

enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  UNSUBSCRIBED
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum ParticipantRole {
  ADMIN
  MEMBER
}

model Feedback {
  id          String        @id @default(cuid())
  userId      String
  rating      Int           // 1-5 star rating
  title       String
  content     String
  serviceType String?       // MENTORSHIP or ADVISORY
  isPublic    Boolean       @default(true)
  isApproved  Boolean       @default(false) // Admin approval for public display
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
  @@index([isApproved])
  @@index([createdAt])
  @@map("feedbacks")
}
